import logging
import json
import asyncio
import datetime
import threading
import http.server
import socketserver
import os

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from avito_api import get_market_stats
from nspd_services import check_kadastr_data
import openai

# –§–∏–∫—Ç–∏–≤–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
def dummy_server():
    PORT = int(os.environ.get("PORT", 10000))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print("üîµ –§–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É", PORT, "–∑–∞–ø—É—â–µ–Ω")
        httpd.serve_forever()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
openai.api_key = os.environ.get("OPENAI_API_KEY")
DATA_FILE = "data.json"
user_data = {}

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    with open(DATA_FILE, "r") as f:
        user_data = json.load(f)
except:
    user_data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(user_data, f, indent=2)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid not in user_data:
        user_data[uid] = {"role": "–≥–æ—Å—Ç—å", "tasks": [], "ads": [], "reminders": []}
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Altai.AI ‚Äî —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.",
        reply_markup=ReplyKeyboardMarkup([["üß† –ü–ª–∞–Ω", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"],
                                          ["üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "üè° –û–±—ä—è–≤–ª–µ–Ω–∏—è"],
                                          ["‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"]], resize_keyboard=True)
    )

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    role = update.message.text
    user_data.setdefault(uid, {})["role"] = role
    save_data()
    await update.message.reply_text(f"–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role}")

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    task = " ".join(context.args)
    user_data[uid]["tasks"].append(task)
    save_data()
    await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task}")

async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    tasks = user_data[uid].get("tasks", [])
    if not tasks:
        await update.message.reply_text("–ó–∞–¥–∞—á –Ω–µ—Ç.")
    else:
        await update.message.reply_text("üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
" + "\n".join(f"{i+1}. {t}" for i, t in enumerate(tasks)))

async def kadastr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    num = " ".join(context.args)
    result = check_kadastr_data(num)
    await update.message.reply_text(f"üìç –û—Ç–≤–µ—Ç –ø–æ —É—á–∞—Å—Ç–∫—É {num}:
{result}")

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    region = " ".join(context.args)
    stats = get_market_stats(region)
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É {region}:
"
        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['avg_price_per_sqm']}‚ÇΩ/–º¬≤
"
        f"–ú–∏–Ω: {stats['min_price']}‚ÇΩ, –ú–∞–∫—Å: {stats['max_price']}‚ÇΩ
"
        f"–û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≤—ã–±–æ—Ä–∫–µ: {stats['sample_size']}"
    )

# –ó–∞–ø—É—Å–∫
def main():
    threading.Thread(target=dummy_server, daemon=True).start()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("role", role))
    app.add_handler(CommandHandler("add_task", add_task))
    app.add_handler(CommandHandler("tasks", show_tasks))
    app.add_handler(CommandHandler("kadastr", kadastr))
    app.add_handler(CommandHandler("market", market))
    print("ü§ñ –ë–æ—Ç Altai.AI –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
